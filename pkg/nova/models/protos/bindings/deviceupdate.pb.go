// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: deviceupdate.proto

package bindings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_UNKNOWN_DEVICE_TYPE       DeviceType = 0
	DeviceType_ANDROID_DEVICE            DeviceType = 1
	DeviceType_SPOT_DEVICE               DeviceType = 2
	DeviceType_TEST_DEVICE_TYPE          DeviceType = 3
	DeviceType_AUTO_DEVICE               DeviceType = 4
	DeviceType_FASTPAIR_DEVICE           DeviceType = 5
	DeviceType_SUPERVISED_ANDROID_DEVICE DeviceType = 7
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "UNKNOWN_DEVICE_TYPE",
		1: "ANDROID_DEVICE",
		2: "SPOT_DEVICE",
		3: "TEST_DEVICE_TYPE",
		4: "AUTO_DEVICE",
		5: "FASTPAIR_DEVICE",
		7: "SUPERVISED_ANDROID_DEVICE",
	}
	DeviceType_value = map[string]int32{
		"UNKNOWN_DEVICE_TYPE":       0,
		"ANDROID_DEVICE":            1,
		"SPOT_DEVICE":               2,
		"TEST_DEVICE_TYPE":          3,
		"AUTO_DEVICE":               4,
		"FASTPAIR_DEVICE":           5,
		"SUPERVISED_ANDROID_DEVICE": 7,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_deviceupdate_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_deviceupdate_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{0}
}

type SpotContributorType int32

const (
	SpotContributorType_FMDN_DISABLED_DEFAULT          SpotContributorType = 0
	SpotContributorType_FMDN_CONTRIBUTOR_HIGH_TRAFFIC  SpotContributorType = 3
	SpotContributorType_FMDN_CONTRIBUTOR_ALL_LOCATIONS SpotContributorType = 4
	SpotContributorType_FMDN_HIGH_TRAFFIC              SpotContributorType = 1
	SpotContributorType_FMDN_ALL_LOCATIONS             SpotContributorType = 2
)

// Enum value maps for SpotContributorType.
var (
	SpotContributorType_name = map[int32]string{
		0: "FMDN_DISABLED_DEFAULT",
		3: "FMDN_CONTRIBUTOR_HIGH_TRAFFIC",
		4: "FMDN_CONTRIBUTOR_ALL_LOCATIONS",
		1: "FMDN_HIGH_TRAFFIC",
		2: "FMDN_ALL_LOCATIONS",
	}
	SpotContributorType_value = map[string]int32{
		"FMDN_DISABLED_DEFAULT":          0,
		"FMDN_CONTRIBUTOR_HIGH_TRAFFIC":  3,
		"FMDN_CONTRIBUTOR_ALL_LOCATIONS": 4,
		"FMDN_HIGH_TRAFFIC":              1,
		"FMDN_ALL_LOCATIONS":             2,
	}
)

func (x SpotContributorType) Enum() *SpotContributorType {
	p := new(SpotContributorType)
	*p = x
	return p
}

func (x SpotContributorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpotContributorType) Descriptor() protoreflect.EnumDescriptor {
	return file_deviceupdate_proto_enumTypes[1].Descriptor()
}

func (SpotContributorType) Type() protoreflect.EnumType {
	return &file_deviceupdate_proto_enumTypes[1]
}

func (x SpotContributorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpotContributorType.Descriptor instead.
func (SpotContributorType) EnumDescriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{1}
}

type DeviceComponent int32

const (
	DeviceComponent_DEVICE_COMPONENT_UNSPECIFIED DeviceComponent = 0
	DeviceComponent_DEVICE_COMPONENT_RIGHT       DeviceComponent = 1
	DeviceComponent_DEVICE_COMPONENT_LEFT        DeviceComponent = 2
	DeviceComponent_DEVICE_COMPONENT_CASE        DeviceComponent = 3
)

// Enum value maps for DeviceComponent.
var (
	DeviceComponent_name = map[int32]string{
		0: "DEVICE_COMPONENT_UNSPECIFIED",
		1: "DEVICE_COMPONENT_RIGHT",
		2: "DEVICE_COMPONENT_LEFT",
		3: "DEVICE_COMPONENT_CASE",
	}
	DeviceComponent_value = map[string]int32{
		"DEVICE_COMPONENT_UNSPECIFIED": 0,
		"DEVICE_COMPONENT_RIGHT":       1,
		"DEVICE_COMPONENT_LEFT":        2,
		"DEVICE_COMPONENT_CASE":        3,
	}
)

func (x DeviceComponent) Enum() *DeviceComponent {
	p := new(DeviceComponent)
	*p = x
	return p
}

func (x DeviceComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_deviceupdate_proto_enumTypes[2].Descriptor()
}

func (DeviceComponent) Type() protoreflect.EnumType {
	return &file_deviceupdate_proto_enumTypes[2]
}

func (x DeviceComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceComponent.Descriptor instead.
func (DeviceComponent) EnumDescriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{2}
}

type IdentifierInformationType int32

const (
	IdentifierInformationType_IDENTIFIER_UNKNOWN IdentifierInformationType = 0
	IdentifierInformationType_IDENTIFIER_ANDROID IdentifierInformationType = 1
	IdentifierInformationType_IDENTIFIER_SPOT    IdentifierInformationType = 2
)

// Enum value maps for IdentifierInformationType.
var (
	IdentifierInformationType_name = map[int32]string{
		0: "IDENTIFIER_UNKNOWN",
		1: "IDENTIFIER_ANDROID",
		2: "IDENTIFIER_SPOT",
	}
	IdentifierInformationType_value = map[string]int32{
		"IDENTIFIER_UNKNOWN": 0,
		"IDENTIFIER_ANDROID": 1,
		"IDENTIFIER_SPOT":    2,
	}
)

func (x IdentifierInformationType) Enum() *IdentifierInformationType {
	p := new(IdentifierInformationType)
	*p = x
	return p
}

func (x IdentifierInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_deviceupdate_proto_enumTypes[3].Descriptor()
}

func (IdentifierInformationType) Type() protoreflect.EnumType {
	return &file_deviceupdate_proto_enumTypes[3]
}

func (x IdentifierInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierInformationType.Descriptor instead.
func (IdentifierInformationType) EnumDescriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{3}
}

type SpotDeviceType int32

const (
	SpotDeviceType_DEVICE_TYPE_UNKNOWN        SpotDeviceType = 0
	SpotDeviceType_DEVICE_TYPE_BEACON         SpotDeviceType = 1
	SpotDeviceType_DEVICE_TYPE_HEADPHONES     SpotDeviceType = 2
	SpotDeviceType_DEVICE_TYPE_KEYS           SpotDeviceType = 3
	SpotDeviceType_DEVICE_TYPE_WATCH          SpotDeviceType = 4
	SpotDeviceType_DEVICE_TYPE_WALLET         SpotDeviceType = 5
	SpotDeviceType_DEVICE_TYPE_BAG            SpotDeviceType = 7
	SpotDeviceType_DEVICE_TYPE_LAPTOP         SpotDeviceType = 8
	SpotDeviceType_DEVICE_TYPE_CAR            SpotDeviceType = 9
	SpotDeviceType_DEVICE_TYPE_REMOTE_CONTROL SpotDeviceType = 10
	SpotDeviceType_DEVICE_TYPE_BADGE          SpotDeviceType = 11
	SpotDeviceType_DEVICE_TYPE_BIKE           SpotDeviceType = 12
	SpotDeviceType_DEVICE_TYPE_CAMERA         SpotDeviceType = 13
	SpotDeviceType_DEVICE_TYPE_CAT            SpotDeviceType = 14
	SpotDeviceType_DEVICE_TYPE_CHARGER        SpotDeviceType = 15
	SpotDeviceType_DEVICE_TYPE_CLOTHING       SpotDeviceType = 16
	SpotDeviceType_DEVICE_TYPE_DOG            SpotDeviceType = 17
	SpotDeviceType_DEVICE_TYPE_NOTEBOOK       SpotDeviceType = 18
	SpotDeviceType_DEVICE_TYPE_PASSPORT       SpotDeviceType = 19
	SpotDeviceType_DEVICE_TYPE_PHONE          SpotDeviceType = 20
	SpotDeviceType_DEVICE_TYPE_SPEAKER        SpotDeviceType = 21
	SpotDeviceType_DEVICE_TYPE_TABLET         SpotDeviceType = 22
	SpotDeviceType_DEVICE_TYPE_TOY            SpotDeviceType = 23
	SpotDeviceType_DEVICE_TYPE_UMBRELLA       SpotDeviceType = 24
	SpotDeviceType_DEVICE_TYPE_STYLUS         SpotDeviceType = 25
	SpotDeviceType_DEVICE_TYPE_EARBUDS        SpotDeviceType = 26
)

// Enum value maps for SpotDeviceType.
var (
	SpotDeviceType_name = map[int32]string{
		0:  "DEVICE_TYPE_UNKNOWN",
		1:  "DEVICE_TYPE_BEACON",
		2:  "DEVICE_TYPE_HEADPHONES",
		3:  "DEVICE_TYPE_KEYS",
		4:  "DEVICE_TYPE_WATCH",
		5:  "DEVICE_TYPE_WALLET",
		7:  "DEVICE_TYPE_BAG",
		8:  "DEVICE_TYPE_LAPTOP",
		9:  "DEVICE_TYPE_CAR",
		10: "DEVICE_TYPE_REMOTE_CONTROL",
		11: "DEVICE_TYPE_BADGE",
		12: "DEVICE_TYPE_BIKE",
		13: "DEVICE_TYPE_CAMERA",
		14: "DEVICE_TYPE_CAT",
		15: "DEVICE_TYPE_CHARGER",
		16: "DEVICE_TYPE_CLOTHING",
		17: "DEVICE_TYPE_DOG",
		18: "DEVICE_TYPE_NOTEBOOK",
		19: "DEVICE_TYPE_PASSPORT",
		20: "DEVICE_TYPE_PHONE",
		21: "DEVICE_TYPE_SPEAKER",
		22: "DEVICE_TYPE_TABLET",
		23: "DEVICE_TYPE_TOY",
		24: "DEVICE_TYPE_UMBRELLA",
		25: "DEVICE_TYPE_STYLUS",
		26: "DEVICE_TYPE_EARBUDS",
	}
	SpotDeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNKNOWN":        0,
		"DEVICE_TYPE_BEACON":         1,
		"DEVICE_TYPE_HEADPHONES":     2,
		"DEVICE_TYPE_KEYS":           3,
		"DEVICE_TYPE_WATCH":          4,
		"DEVICE_TYPE_WALLET":         5,
		"DEVICE_TYPE_BAG":            7,
		"DEVICE_TYPE_LAPTOP":         8,
		"DEVICE_TYPE_CAR":            9,
		"DEVICE_TYPE_REMOTE_CONTROL": 10,
		"DEVICE_TYPE_BADGE":          11,
		"DEVICE_TYPE_BIKE":           12,
		"DEVICE_TYPE_CAMERA":         13,
		"DEVICE_TYPE_CAT":            14,
		"DEVICE_TYPE_CHARGER":        15,
		"DEVICE_TYPE_CLOTHING":       16,
		"DEVICE_TYPE_DOG":            17,
		"DEVICE_TYPE_NOTEBOOK":       18,
		"DEVICE_TYPE_PASSPORT":       19,
		"DEVICE_TYPE_PHONE":          20,
		"DEVICE_TYPE_SPEAKER":        21,
		"DEVICE_TYPE_TABLET":         22,
		"DEVICE_TYPE_TOY":            23,
		"DEVICE_TYPE_UMBRELLA":       24,
		"DEVICE_TYPE_STYLUS":         25,
		"DEVICE_TYPE_EARBUDS":        26,
	}
)

func (x SpotDeviceType) Enum() *SpotDeviceType {
	p := new(SpotDeviceType)
	*p = x
	return p
}

func (x SpotDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpotDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_deviceupdate_proto_enumTypes[4].Descriptor()
}

func (SpotDeviceType) Type() protoreflect.EnumType {
	return &file_deviceupdate_proto_enumTypes[4]
}

func (x SpotDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpotDeviceType.Descriptor instead.
func (SpotDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{4}
}

type GetEidInfoForE2EeDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedOwnerKeyAndMetadata *EncryptedOwnerKeyAndMetadata `protobuf:"bytes,4,opt,name=encryptedOwnerKeyAndMetadata,proto3" json:"encryptedOwnerKeyAndMetadata,omitempty"`
}

func (x *GetEidInfoForE2EeDevicesResponse) Reset() {
	*x = GetEidInfoForE2EeDevicesResponse{}
	mi := &file_deviceupdate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEidInfoForE2EeDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEidInfoForE2EeDevicesResponse) ProtoMessage() {}

func (x *GetEidInfoForE2EeDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEidInfoForE2EeDevicesResponse.ProtoReflect.Descriptor instead.
func (*GetEidInfoForE2EeDevicesResponse) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{0}
}

func (x *GetEidInfoForE2EeDevicesResponse) GetEncryptedOwnerKeyAndMetadata() *EncryptedOwnerKeyAndMetadata {
	if x != nil {
		return x.EncryptedOwnerKeyAndMetadata
	}
	return nil
}

type EncryptedOwnerKeyAndMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedOwnerKey []byte `protobuf:"bytes,1,opt,name=encryptedOwnerKey,proto3" json:"encryptedOwnerKey,omitempty"`
	SecurityDomain    string `protobuf:"bytes,3,opt,name=securityDomain,proto3" json:"securityDomain,omitempty"`
}

func (x *EncryptedOwnerKeyAndMetadata) Reset() {
	*x = EncryptedOwnerKeyAndMetadata{}
	mi := &file_deviceupdate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedOwnerKeyAndMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedOwnerKeyAndMetadata) ProtoMessage() {}

func (x *EncryptedOwnerKeyAndMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedOwnerKeyAndMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedOwnerKeyAndMetadata) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptedOwnerKeyAndMetadata) GetEncryptedOwnerKey() []byte {
	if x != nil {
		return x.EncryptedOwnerKey
	}
	return nil
}

func (x *EncryptedOwnerKeyAndMetadata) GetSecurityDomain() string {
	if x != nil {
		return x.SecurityDomain
	}
	return ""
}

type DevicesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceMetadata []*DeviceMetadata `protobuf:"bytes,2,rep,name=deviceMetadata,proto3" json:"deviceMetadata,omitempty"`
}

func (x *DevicesList) Reset() {
	*x = DevicesList{}
	mi := &file_deviceupdate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesList) ProtoMessage() {}

func (x *DevicesList) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesList.ProtoReflect.Descriptor instead.
func (*DevicesList) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{2}
}

func (x *DevicesList) GetDeviceMetadata() []*DeviceMetadata {
	if x != nil {
		return x.DeviceMetadata
	}
	return nil
}

type DevicesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceListRequestPayload *DevicesListRequestPayload `protobuf:"bytes,1,opt,name=deviceListRequestPayload,proto3" json:"deviceListRequestPayload,omitempty"`
}

func (x *DevicesListRequest) Reset() {
	*x = DevicesListRequest{}
	mi := &file_deviceupdate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesListRequest) ProtoMessage() {}

func (x *DevicesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesListRequest.ProtoReflect.Descriptor instead.
func (*DevicesListRequest) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{3}
}

func (x *DevicesListRequest) GetDeviceListRequestPayload() *DevicesListRequestPayload {
	if x != nil {
		return x.DeviceListRequestPayload
	}
	return nil
}

type DevicesListRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type DeviceType `protobuf:"varint,1,opt,name=type,proto3,enum=DeviceType" json:"type,omitempty"`
	Id   string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DevicesListRequestPayload) Reset() {
	*x = DevicesListRequestPayload{}
	mi := &file_deviceupdate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesListRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesListRequestPayload) ProtoMessage() {}

func (x *DevicesListRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesListRequestPayload.ProtoReflect.Descriptor instead.
func (*DevicesListRequestPayload) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{4}
}

func (x *DevicesListRequestPayload) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_UNKNOWN_DEVICE_TYPE
}

func (x *DevicesListRequestPayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExecuteActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope           *ExecuteActionScope           `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Action          *ExecuteActionType            `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	RequestMetadata *ExecuteActionRequestMetadata `protobuf:"bytes,3,opt,name=requestMetadata,proto3" json:"requestMetadata,omitempty"`
}

func (x *ExecuteActionRequest) Reset() {
	*x = ExecuteActionRequest{}
	mi := &file_deviceupdate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionRequest) ProtoMessage() {}

func (x *ExecuteActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionRequest.ProtoReflect.Descriptor instead.
func (*ExecuteActionRequest) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteActionRequest) GetScope() *ExecuteActionScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ExecuteActionRequest) GetAction() *ExecuteActionType {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ExecuteActionRequest) GetRequestMetadata() *ExecuteActionRequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

type ExecuteActionRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              DeviceType                   `protobuf:"varint,1,opt,name=type,proto3,enum=DeviceType" json:"type,omitempty"`
	RequestUuid       string                       `protobuf:"bytes,2,opt,name=requestUuid,proto3" json:"requestUuid,omitempty"`
	FmdClientUuid     string                       `protobuf:"bytes,3,opt,name=fmdClientUuid,proto3" json:"fmdClientUuid,omitempty"`
	GcmRegistrationId *GcmCloudMessagingIdProtobuf `protobuf:"bytes,4,opt,name=gcmRegistrationId,proto3" json:"gcmRegistrationId,omitempty"`
	Unknown           bool                         `protobuf:"varint,6,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *ExecuteActionRequestMetadata) Reset() {
	*x = ExecuteActionRequestMetadata{}
	mi := &file_deviceupdate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionRequestMetadata) ProtoMessage() {}

func (x *ExecuteActionRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionRequestMetadata.ProtoReflect.Descriptor instead.
func (*ExecuteActionRequestMetadata) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteActionRequestMetadata) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_UNKNOWN_DEVICE_TYPE
}

func (x *ExecuteActionRequestMetadata) GetRequestUuid() string {
	if x != nil {
		return x.RequestUuid
	}
	return ""
}

func (x *ExecuteActionRequestMetadata) GetFmdClientUuid() string {
	if x != nil {
		return x.FmdClientUuid
	}
	return ""
}

func (x *ExecuteActionRequestMetadata) GetGcmRegistrationId() *GcmCloudMessagingIdProtobuf {
	if x != nil {
		return x.GcmRegistrationId
	}
	return nil
}

func (x *ExecuteActionRequestMetadata) GetUnknown() bool {
	if x != nil {
		return x.Unknown
	}
	return false
}

type GcmCloudMessagingIdProtobuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GcmCloudMessagingIdProtobuf) Reset() {
	*x = GcmCloudMessagingIdProtobuf{}
	mi := &file_deviceupdate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcmCloudMessagingIdProtobuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcmCloudMessagingIdProtobuf) ProtoMessage() {}

func (x *GcmCloudMessagingIdProtobuf) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcmCloudMessagingIdProtobuf.ProtoReflect.Descriptor instead.
func (*GcmCloudMessagingIdProtobuf) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{7}
}

func (x *GcmCloudMessagingIdProtobuf) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExecuteActionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocateTracker *ExecuteActionLocateTrackerType `protobuf:"bytes,30,opt,name=locateTracker,proto3" json:"locateTracker,omitempty"`
	StartSound    *ExecuteActionSoundType         `protobuf:"bytes,31,opt,name=startSound,proto3" json:"startSound,omitempty"`
	StopSound     *ExecuteActionSoundType         `protobuf:"bytes,32,opt,name=stopSound,proto3" json:"stopSound,omitempty"`
}

func (x *ExecuteActionType) Reset() {
	*x = ExecuteActionType{}
	mi := &file_deviceupdate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionType) ProtoMessage() {}

func (x *ExecuteActionType) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionType.ProtoReflect.Descriptor instead.
func (*ExecuteActionType) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{8}
}

func (x *ExecuteActionType) GetLocateTracker() *ExecuteActionLocateTrackerType {
	if x != nil {
		return x.LocateTracker
	}
	return nil
}

func (x *ExecuteActionType) GetStartSound() *ExecuteActionSoundType {
	if x != nil {
		return x.StartSound
	}
	return nil
}

func (x *ExecuteActionType) GetStopSound() *ExecuteActionSoundType {
	if x != nil {
		return x.StopSound
	}
	return nil
}

type ExecuteActionLocateTrackerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastHighTrafficEnablingTime *Time               `protobuf:"bytes,2,opt,name=lastHighTrafficEnablingTime,proto3" json:"lastHighTrafficEnablingTime,omitempty"`
	ContributorType             SpotContributorType `protobuf:"varint,3,opt,name=contributorType,proto3,enum=SpotContributorType" json:"contributorType,omitempty"`
}

func (x *ExecuteActionLocateTrackerType) Reset() {
	*x = ExecuteActionLocateTrackerType{}
	mi := &file_deviceupdate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionLocateTrackerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionLocateTrackerType) ProtoMessage() {}

func (x *ExecuteActionLocateTrackerType) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionLocateTrackerType.ProtoReflect.Descriptor instead.
func (*ExecuteActionLocateTrackerType) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{9}
}

func (x *ExecuteActionLocateTrackerType) GetLastHighTrafficEnablingTime() *Time {
	if x != nil {
		return x.LastHighTrafficEnablingTime
	}
	return nil
}

func (x *ExecuteActionLocateTrackerType) GetContributorType() SpotContributorType {
	if x != nil {
		return x.ContributorType
	}
	return SpotContributorType_FMDN_DISABLED_DEFAULT
}

type ExecuteActionSoundType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component DeviceComponent `protobuf:"varint,1,opt,name=component,proto3,enum=DeviceComponent" json:"component,omitempty"`
}

func (x *ExecuteActionSoundType) Reset() {
	*x = ExecuteActionSoundType{}
	mi := &file_deviceupdate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionSoundType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionSoundType) ProtoMessage() {}

func (x *ExecuteActionSoundType) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionSoundType.ProtoReflect.Descriptor instead.
func (*ExecuteActionSoundType) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteActionSoundType) GetComponent() DeviceComponent {
	if x != nil {
		return x.Component
	}
	return DeviceComponent_DEVICE_COMPONENT_UNSPECIFIED
}

type ExecuteActionScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   DeviceType                     `protobuf:"varint,2,opt,name=type,proto3,enum=DeviceType" json:"type,omitempty"`
	Device *ExecuteActionDeviceIdentifier `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *ExecuteActionScope) Reset() {
	*x = ExecuteActionScope{}
	mi := &file_deviceupdate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionScope) ProtoMessage() {}

func (x *ExecuteActionScope) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionScope.ProtoReflect.Descriptor instead.
func (*ExecuteActionScope) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteActionScope) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_UNKNOWN_DEVICE_TYPE
}

func (x *ExecuteActionScope) GetDevice() *ExecuteActionDeviceIdentifier {
	if x != nil {
		return x.Device
	}
	return nil
}

type ExecuteActionDeviceIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanonicId *CanonicId `protobuf:"bytes,1,opt,name=canonicId,proto3" json:"canonicId,omitempty"`
}

func (x *ExecuteActionDeviceIdentifier) Reset() {
	*x = ExecuteActionDeviceIdentifier{}
	mi := &file_deviceupdate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteActionDeviceIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteActionDeviceIdentifier) ProtoMessage() {}

func (x *ExecuteActionDeviceIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteActionDeviceIdentifier.ProtoReflect.Descriptor instead.
func (*ExecuteActionDeviceIdentifier) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{12}
}

func (x *ExecuteActionDeviceIdentifier) GetCanonicId() *CanonicId {
	if x != nil {
		return x.CanonicId
	}
	return nil
}

type DeviceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FcmMetadata     *ExecuteActionRequestMetadata `protobuf:"bytes,1,opt,name=fcmMetadata,proto3" json:"fcmMetadata,omitempty"`
	DeviceMetadata  *DeviceMetadata               `protobuf:"bytes,3,opt,name=deviceMetadata,proto3" json:"deviceMetadata,omitempty"`
	RequestMetadata *RequestMetadata              `protobuf:"bytes,2,opt,name=requestMetadata,proto3" json:"requestMetadata,omitempty"`
}

func (x *DeviceUpdate) Reset() {
	*x = DeviceUpdate{}
	mi := &file_deviceupdate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUpdate) ProtoMessage() {}

func (x *DeviceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUpdate.ProtoReflect.Descriptor instead.
func (*DeviceUpdate) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceUpdate) GetFcmMetadata() *ExecuteActionRequestMetadata {
	if x != nil {
		return x.FcmMetadata
	}
	return nil
}

func (x *DeviceUpdate) GetDeviceMetadata() *DeviceMetadata {
	if x != nil {
		return x.DeviceMetadata
	}
	return nil
}

func (x *DeviceUpdate) GetRequestMetadata() *RequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

type DeviceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifierInformation *IdentitfierInformation `protobuf:"bytes,1,opt,name=identifierInformation,proto3" json:"identifierInformation,omitempty"`
	Information           *DeviceInformation      `protobuf:"bytes,4,opt,name=information,proto3" json:"information,omitempty"`
	UserDefinedDeviceName string                  `protobuf:"bytes,5,opt,name=userDefinedDeviceName,proto3" json:"userDefinedDeviceName,omitempty"`
	ImageInformation      *ImageInformation       `protobuf:"bytes,6,opt,name=imageInformation,proto3" json:"imageInformation,omitempty"`
}

func (x *DeviceMetadata) Reset() {
	*x = DeviceMetadata{}
	mi := &file_deviceupdate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetadata) ProtoMessage() {}

func (x *DeviceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetadata.ProtoReflect.Descriptor instead.
func (*DeviceMetadata) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceMetadata) GetIdentifierInformation() *IdentitfierInformation {
	if x != nil {
		return x.IdentifierInformation
	}
	return nil
}

func (x *DeviceMetadata) GetInformation() *DeviceInformation {
	if x != nil {
		return x.Information
	}
	return nil
}

func (x *DeviceMetadata) GetUserDefinedDeviceName() string {
	if x != nil {
		return x.UserDefinedDeviceName
	}
	return ""
}

func (x *DeviceMetadata) GetImageInformation() *ImageInformation {
	if x != nil {
		return x.ImageInformation
	}
	return nil
}

type ImageInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl string `protobuf:"bytes,1,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
}

func (x *ImageInformation) Reset() {
	*x = ImageInformation{}
	mi := &file_deviceupdate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInformation) ProtoMessage() {}

func (x *ImageInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInformation.ProtoReflect.Descriptor instead.
func (*ImageInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{15}
}

func (x *ImageInformation) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type IdentitfierInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneInformation *PhoneInformation         `protobuf:"bytes,1,opt,name=phoneInformation,proto3" json:"phoneInformation,omitempty"`
	Type             IdentifierInformationType `protobuf:"varint,2,opt,name=type,proto3,enum=IdentifierInformationType" json:"type,omitempty"`
	CanonicIds       *CanonicIds               `protobuf:"bytes,3,opt,name=canonicIds,proto3" json:"canonicIds,omitempty"`
}

func (x *IdentitfierInformation) Reset() {
	*x = IdentitfierInformation{}
	mi := &file_deviceupdate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentitfierInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentitfierInformation) ProtoMessage() {}

func (x *IdentitfierInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentitfierInformation.ProtoReflect.Descriptor instead.
func (*IdentitfierInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{16}
}

func (x *IdentitfierInformation) GetPhoneInformation() *PhoneInformation {
	if x != nil {
		return x.PhoneInformation
	}
	return nil
}

func (x *IdentitfierInformation) GetType() IdentifierInformationType {
	if x != nil {
		return x.Type
	}
	return IdentifierInformationType_IDENTIFIER_UNKNOWN
}

func (x *IdentitfierInformation) GetCanonicIds() *CanonicIds {
	if x != nil {
		return x.CanonicIds
	}
	return nil
}

type PhoneInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanonicIds *CanonicIds `protobuf:"bytes,2,opt,name=canonicIds,proto3" json:"canonicIds,omitempty"`
}

func (x *PhoneInformation) Reset() {
	*x = PhoneInformation{}
	mi := &file_deviceupdate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneInformation) ProtoMessage() {}

func (x *PhoneInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneInformation.ProtoReflect.Descriptor instead.
func (*PhoneInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{17}
}

func (x *PhoneInformation) GetCanonicIds() *CanonicIds {
	if x != nil {
		return x.CanonicIds
	}
	return nil
}

type CanonicIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanonicId []*CanonicId `protobuf:"bytes,1,rep,name=canonicId,proto3" json:"canonicId,omitempty"`
}

func (x *CanonicIds) Reset() {
	*x = CanonicIds{}
	mi := &file_deviceupdate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanonicIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicIds) ProtoMessage() {}

func (x *CanonicIds) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicIds.ProtoReflect.Descriptor instead.
func (*CanonicIds) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{18}
}

func (x *CanonicIds) GetCanonicId() []*CanonicId {
	if x != nil {
		return x.CanonicId
	}
	return nil
}

type CanonicId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CanonicId) Reset() {
	*x = CanonicId{}
	mi := &file_deviceupdate_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanonicId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicId) ProtoMessage() {}

func (x *CanonicId) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicId.ProtoReflect.Descriptor instead.
func (*CanonicId) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{19}
}

func (x *CanonicId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeviceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceRegistration  *DeviceRegistration  `protobuf:"bytes,1,opt,name=deviceRegistration,proto3" json:"deviceRegistration,omitempty"`
	LocationInformation *LocationInformation `protobuf:"bytes,2,opt,name=locationInformation,proto3" json:"locationInformation,omitempty"`
	AccessInformation   []*AccessInformation `protobuf:"bytes,3,rep,name=accessInformation,proto3" json:"accessInformation,omitempty"`
}

func (x *DeviceInformation) Reset() {
	*x = DeviceInformation{}
	mi := &file_deviceupdate_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInformation) ProtoMessage() {}

func (x *DeviceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInformation.ProtoReflect.Descriptor instead.
func (*DeviceInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceInformation) GetDeviceRegistration() *DeviceRegistration {
	if x != nil {
		return x.DeviceRegistration
	}
	return nil
}

func (x *DeviceInformation) GetLocationInformation() *LocationInformation {
	if x != nil {
		return x.LocationInformation
	}
	return nil
}

func (x *DeviceInformation) GetAccessInformation() []*AccessInformation {
	if x != nil {
		return x.AccessInformation
	}
	return nil
}

type DeviceTypeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType SpotDeviceType `protobuf:"varint,2,opt,name=deviceType,proto3,enum=SpotDeviceType" json:"deviceType,omitempty"`
}

func (x *DeviceTypeInformation) Reset() {
	*x = DeviceTypeInformation{}
	mi := &file_deviceupdate_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceTypeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTypeInformation) ProtoMessage() {}

func (x *DeviceTypeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTypeInformation.ProtoReflect.Descriptor instead.
func (*DeviceTypeInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceTypeInformation) GetDeviceType() SpotDeviceType {
	if x != nil {
		return x.DeviceType
	}
	return SpotDeviceType_DEVICE_TYPE_UNKNOWN
}

type DeviceRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceTypeInformation *DeviceTypeInformation `protobuf:"bytes,2,opt,name=deviceTypeInformation,proto3" json:"deviceTypeInformation,omitempty"`
	EncryptedUserSecrets  *EncryptedUserSecrets  `protobuf:"bytes,19,opt,name=encryptedUserSecrets,proto3" json:"encryptedUserSecrets,omitempty"`
	Manufacturer          string                 `protobuf:"bytes,20,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	FastPairModelId       string                 `protobuf:"bytes,21,opt,name=fastPairModelId,proto3" json:"fastPairModelId,omitempty"`
	PairDate              int32                  `protobuf:"varint,23,opt,name=pairDate,proto3" json:"pairDate,omitempty"`
	Model                 string                 `protobuf:"bytes,34,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *DeviceRegistration) Reset() {
	*x = DeviceRegistration{}
	mi := &file_deviceupdate_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistration) ProtoMessage() {}

func (x *DeviceRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistration.ProtoReflect.Descriptor instead.
func (*DeviceRegistration) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceRegistration) GetDeviceTypeInformation() *DeviceTypeInformation {
	if x != nil {
		return x.DeviceTypeInformation
	}
	return nil
}

func (x *DeviceRegistration) GetEncryptedUserSecrets() *EncryptedUserSecrets {
	if x != nil {
		return x.EncryptedUserSecrets
	}
	return nil
}

func (x *DeviceRegistration) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceRegistration) GetFastPairModelId() string {
	if x != nil {
		return x.FastPairModelId
	}
	return ""
}

func (x *DeviceRegistration) GetPairDate() int32 {
	if x != nil {
		return x.PairDate
	}
	return 0
}

func (x *DeviceRegistration) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type EncryptedUserSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedIdentityKey                   []byte `protobuf:"bytes,1,opt,name=encryptedIdentityKey,proto3" json:"encryptedIdentityKey,omitempty"`
	OwnerKeyVersion                        int32  `protobuf:"varint,3,opt,name=ownerKeyVersion,proto3" json:"ownerKeyVersion,omitempty"`
	EncryptedAccountKey                    []byte `protobuf:"bytes,4,opt,name=encryptedAccountKey,proto3" json:"encryptedAccountKey,omitempty"`
	CreationDate                           *Time  `protobuf:"bytes,8,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	EncryptedSha256AccountKeyPublicAddress []byte `protobuf:"bytes,11,opt,name=encryptedSha256AccountKeyPublicAddress,proto3" json:"encryptedSha256AccountKeyPublicAddress,omitempty"`
}

func (x *EncryptedUserSecrets) Reset() {
	*x = EncryptedUserSecrets{}
	mi := &file_deviceupdate_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptedUserSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedUserSecrets) ProtoMessage() {}

func (x *EncryptedUserSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedUserSecrets.ProtoReflect.Descriptor instead.
func (*EncryptedUserSecrets) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{23}
}

func (x *EncryptedUserSecrets) GetEncryptedIdentityKey() []byte {
	if x != nil {
		return x.EncryptedIdentityKey
	}
	return nil
}

func (x *EncryptedUserSecrets) GetOwnerKeyVersion() int32 {
	if x != nil {
		return x.OwnerKeyVersion
	}
	return 0
}

func (x *EncryptedUserSecrets) GetEncryptedAccountKey() []byte {
	if x != nil {
		return x.EncryptedAccountKey
	}
	return nil
}

func (x *EncryptedUserSecrets) GetCreationDate() *Time {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *EncryptedUserSecrets) GetEncryptedSha256AccountKeyPublicAddress() []byte {
	if x != nil {
		return x.EncryptedSha256AccountKeyPublicAddress
	}
	return nil
}

type LocationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports *LocationsAndTimestampsWrapper `protobuf:"bytes,3,opt,name=reports,proto3" json:"reports,omitempty"`
}

func (x *LocationInformation) Reset() {
	*x = LocationInformation{}
	mi := &file_deviceupdate_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationInformation) ProtoMessage() {}

func (x *LocationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationInformation.ProtoReflect.Descriptor instead.
func (*LocationInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{24}
}

func (x *LocationInformation) GetReports() *LocationsAndTimestampsWrapper {
	if x != nil {
		return x.Reports
	}
	return nil
}

type LocationsAndTimestampsWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentLocationAndNetworkLocations *RecentLocationAndNetworkLocations `protobuf:"bytes,4,opt,name=recentLocationAndNetworkLocations,proto3" json:"recentLocationAndNetworkLocations,omitempty"`
}

func (x *LocationsAndTimestampsWrapper) Reset() {
	*x = LocationsAndTimestampsWrapper{}
	mi := &file_deviceupdate_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationsAndTimestampsWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationsAndTimestampsWrapper) ProtoMessage() {}

func (x *LocationsAndTimestampsWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationsAndTimestampsWrapper.ProtoReflect.Descriptor instead.
func (*LocationsAndTimestampsWrapper) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{25}
}

func (x *LocationsAndTimestampsWrapper) GetRecentLocationAndNetworkLocations() *RecentLocationAndNetworkLocations {
	if x != nil {
		return x.RecentLocationAndNetworkLocations
	}
	return nil
}

type RecentLocationAndNetworkLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentLocation                   *LocationReport   `protobuf:"bytes,1,opt,name=recentLocation,proto3" json:"recentLocation,omitempty"`
	RecentLocationTimestamp          *Time             `protobuf:"bytes,2,opt,name=recentLocationTimestamp,proto3" json:"recentLocationTimestamp,omitempty"`
	NetworkLocations                 []*LocationReport `protobuf:"bytes,5,rep,name=networkLocations,proto3" json:"networkLocations,omitempty"`
	NetworkLocationTimestamps        []*Time           `protobuf:"bytes,6,rep,name=networkLocationTimestamps,proto3" json:"networkLocationTimestamps,omitempty"`
	MinLocationsNeededForAggregation uint32            `protobuf:"varint,9,opt,name=minLocationsNeededForAggregation,proto3" json:"minLocationsNeededForAggregation,omitempty"`
}

func (x *RecentLocationAndNetworkLocations) Reset() {
	*x = RecentLocationAndNetworkLocations{}
	mi := &file_deviceupdate_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecentLocationAndNetworkLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentLocationAndNetworkLocations) ProtoMessage() {}

func (x *RecentLocationAndNetworkLocations) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentLocationAndNetworkLocations.ProtoReflect.Descriptor instead.
func (*RecentLocationAndNetworkLocations) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{26}
}

func (x *RecentLocationAndNetworkLocations) GetRecentLocation() *LocationReport {
	if x != nil {
		return x.RecentLocation
	}
	return nil
}

func (x *RecentLocationAndNetworkLocations) GetRecentLocationTimestamp() *Time {
	if x != nil {
		return x.RecentLocationTimestamp
	}
	return nil
}

func (x *RecentLocationAndNetworkLocations) GetNetworkLocations() []*LocationReport {
	if x != nil {
		return x.NetworkLocations
	}
	return nil
}

func (x *RecentLocationAndNetworkLocations) GetNetworkLocationTimestamps() []*Time {
	if x != nil {
		return x.NetworkLocationTimestamps
	}
	return nil
}

func (x *RecentLocationAndNetworkLocations) GetMinLocationsNeededForAggregation() uint32 {
	if x != nil {
		return x.MinLocationsNeededForAggregation
	}
	return 0
}

type AccessInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email       string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	HasAccess   bool   `protobuf:"varint,2,opt,name=hasAccess,proto3" json:"hasAccess,omitempty"`
	IsOwner     bool   `protobuf:"varint,3,opt,name=isOwner,proto3" json:"isOwner,omitempty"`
	ThisAccount bool   `protobuf:"varint,4,opt,name=thisAccount,proto3" json:"thisAccount,omitempty"`
}

func (x *AccessInformation) Reset() {
	*x = AccessInformation{}
	mi := &file_deviceupdate_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessInformation) ProtoMessage() {}

func (x *AccessInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessInformation.ProtoReflect.Descriptor instead.
func (*AccessInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{27}
}

func (x *AccessInformation) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AccessInformation) GetHasAccess() bool {
	if x != nil {
		return x.HasAccess
	}
	return false
}

func (x *AccessInformation) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

func (x *AccessInformation) GetThisAccount() bool {
	if x != nil {
		return x.ThisAccount
	}
	return false
}

type RequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseTime *Time `protobuf:"bytes,1,opt,name=responseTime,proto3" json:"responseTime,omitempty"`
}

func (x *RequestMetadata) Reset() {
	*x = RequestMetadata{}
	mi := &file_deviceupdate_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMetadata) ProtoMessage() {}

func (x *RequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMetadata.ProtoReflect.Descriptor instead.
func (*RequestMetadata) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{28}
}

func (x *RequestMetadata) GetResponseTime() *Time {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

type EncryptionUnlockRequestExtras struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation      int32           `protobuf:"varint,1,opt,name=operation,proto3" json:"operation,omitempty"`
	SecurityDomain *SecurityDomain `protobuf:"bytes,2,opt,name=securityDomain,proto3" json:"securityDomain,omitempty"`
	SessionId      string          `protobuf:"bytes,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *EncryptionUnlockRequestExtras) Reset() {
	*x = EncryptionUnlockRequestExtras{}
	mi := &file_deviceupdate_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionUnlockRequestExtras) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionUnlockRequestExtras) ProtoMessage() {}

func (x *EncryptionUnlockRequestExtras) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionUnlockRequestExtras.ProtoReflect.Descriptor instead.
func (*EncryptionUnlockRequestExtras) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{29}
}

func (x *EncryptionUnlockRequestExtras) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *EncryptionUnlockRequestExtras) GetSecurityDomain() *SecurityDomain {
	if x != nil {
		return x.SecurityDomain
	}
	return nil
}

func (x *EncryptionUnlockRequestExtras) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SecurityDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Unknown int32  `protobuf:"varint,2,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *SecurityDomain) Reset() {
	*x = SecurityDomain{}
	mi := &file_deviceupdate_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDomain) ProtoMessage() {}

func (x *SecurityDomain) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDomain.ProtoReflect.Descriptor instead.
func (*SecurityDomain) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{30}
}

func (x *SecurityDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityDomain) GetUnknown() int32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  int32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude  int32 `protobuf:"varint,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_deviceupdate_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{31}
}

func (x *Location) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

type RegisterBleDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FastPairModelId           string                     `protobuf:"bytes,7,opt,name=fastPairModelId,proto3" json:"fastPairModelId,omitempty"`
	Description               *DeviceDescription         `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Capabilities              *DeviceCapabilities        `protobuf:"bytes,11,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	E2EePublicKeyRegistration *E2EEPublicKeyRegistration `protobuf:"bytes,16,opt,name=e2eePublicKeyRegistration,proto3" json:"e2eePublicKeyRegistration,omitempty"`
	ManufacturerName          string                     `protobuf:"bytes,17,opt,name=manufacturerName,proto3" json:"manufacturerName,omitempty"`
	RingKey                   []byte                     `protobuf:"bytes,21,opt,name=ringKey,proto3" json:"ringKey,omitempty"`
	RecoveryKey               []byte                     `protobuf:"bytes,22,opt,name=recoveryKey,proto3" json:"recoveryKey,omitempty"`
	UnwantedTrackingKey       []byte                     `protobuf:"bytes,24,opt,name=unwantedTrackingKey,proto3" json:"unwantedTrackingKey,omitempty"`
	ModelName                 string                     `protobuf:"bytes,25,opt,name=modelName,proto3" json:"modelName,omitempty"`
}

func (x *RegisterBleDeviceRequest) Reset() {
	*x = RegisterBleDeviceRequest{}
	mi := &file_deviceupdate_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterBleDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBleDeviceRequest) ProtoMessage() {}

func (x *RegisterBleDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBleDeviceRequest.ProtoReflect.Descriptor instead.
func (*RegisterBleDeviceRequest) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{32}
}

func (x *RegisterBleDeviceRequest) GetFastPairModelId() string {
	if x != nil {
		return x.FastPairModelId
	}
	return ""
}

func (x *RegisterBleDeviceRequest) GetDescription() *DeviceDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RegisterBleDeviceRequest) GetCapabilities() *DeviceCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *RegisterBleDeviceRequest) GetE2EePublicKeyRegistration() *E2EEPublicKeyRegistration {
	if x != nil {
		return x.E2EePublicKeyRegistration
	}
	return nil
}

func (x *RegisterBleDeviceRequest) GetManufacturerName() string {
	if x != nil {
		return x.ManufacturerName
	}
	return ""
}

func (x *RegisterBleDeviceRequest) GetRingKey() []byte {
	if x != nil {
		return x.RingKey
	}
	return nil
}

func (x *RegisterBleDeviceRequest) GetRecoveryKey() []byte {
	if x != nil {
		return x.RecoveryKey
	}
	return nil
}

func (x *RegisterBleDeviceRequest) GetUnwantedTrackingKey() []byte {
	if x != nil {
		return x.UnwantedTrackingKey
	}
	return nil
}

func (x *RegisterBleDeviceRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type E2EEPublicKeyRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RotationExponent     int32                 `protobuf:"varint,1,opt,name=rotationExponent,proto3" json:"rotationExponent,omitempty"`
	EncryptedUserSecrets *EncryptedUserSecrets `protobuf:"bytes,3,opt,name=encryptedUserSecrets,proto3" json:"encryptedUserSecrets,omitempty"`
	PublicKeyIdList      *PublicKeyIdList      `protobuf:"bytes,4,opt,name=publicKeyIdList,proto3" json:"publicKeyIdList,omitempty"`
	PairingDate          int32                 `protobuf:"varint,5,opt,name=pairingDate,proto3" json:"pairingDate,omitempty"`
}

func (x *E2EEPublicKeyRegistration) Reset() {
	*x = E2EEPublicKeyRegistration{}
	mi := &file_deviceupdate_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EEPublicKeyRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EEPublicKeyRegistration) ProtoMessage() {}

func (x *E2EEPublicKeyRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EEPublicKeyRegistration.ProtoReflect.Descriptor instead.
func (*E2EEPublicKeyRegistration) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{33}
}

func (x *E2EEPublicKeyRegistration) GetRotationExponent() int32 {
	if x != nil {
		return x.RotationExponent
	}
	return 0
}

func (x *E2EEPublicKeyRegistration) GetEncryptedUserSecrets() *EncryptedUserSecrets {
	if x != nil {
		return x.EncryptedUserSecrets
	}
	return nil
}

func (x *E2EEPublicKeyRegistration) GetPublicKeyIdList() *PublicKeyIdList {
	if x != nil {
		return x.PublicKeyIdList
	}
	return nil
}

func (x *E2EEPublicKeyRegistration) GetPairingDate() int32 {
	if x != nil {
		return x.PairingDate
	}
	return 0
}

type PublicKeyIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyIdInfo []*PublicKeyIdList_PublicKeyIdInfo `protobuf:"bytes,1,rep,name=publicKeyIdInfo,proto3" json:"publicKeyIdInfo,omitempty"`
}

func (x *PublicKeyIdList) Reset() {
	*x = PublicKeyIdList{}
	mi := &file_deviceupdate_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeyIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyIdList) ProtoMessage() {}

func (x *PublicKeyIdList) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyIdList.ProtoReflect.Descriptor instead.
func (*PublicKeyIdList) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{34}
}

func (x *PublicKeyIdList) GetPublicKeyIdInfo() []*PublicKeyIdList_PublicKeyIdInfo {
	if x != nil {
		return x.PublicKeyIdInfo
	}
	return nil
}

type TruncatedEID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncatedEid []byte `protobuf:"bytes,1,opt,name=truncatedEid,proto3" json:"truncatedEid,omitempty"`
}

func (x *TruncatedEID) Reset() {
	*x = TruncatedEID{}
	mi := &file_deviceupdate_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncatedEID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncatedEID) ProtoMessage() {}

func (x *TruncatedEID) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncatedEID.ProtoReflect.Descriptor instead.
func (*TruncatedEID) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{35}
}

func (x *TruncatedEID) GetTruncatedEid() []byte {
	if x != nil {
		return x.TruncatedEid
	}
	return nil
}

type UploadPrecomputedPublicKeyIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceEids []*UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds `protobuf:"bytes,1,rep,name=deviceEids,proto3" json:"deviceEids,omitempty"`
}

func (x *UploadPrecomputedPublicKeyIdsRequest) Reset() {
	*x = UploadPrecomputedPublicKeyIdsRequest{}
	mi := &file_deviceupdate_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPrecomputedPublicKeyIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPrecomputedPublicKeyIdsRequest) ProtoMessage() {}

func (x *UploadPrecomputedPublicKeyIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPrecomputedPublicKeyIdsRequest.ProtoReflect.Descriptor instead.
func (*UploadPrecomputedPublicKeyIdsRequest) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{36}
}

func (x *UploadPrecomputedPublicKeyIdsRequest) GetDeviceEids() []*UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds {
	if x != nil {
		return x.DeviceEids
	}
	return nil
}

type DeviceCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdvertising       bool  `protobuf:"varint,1,opt,name=isAdvertising,proto3" json:"isAdvertising,omitempty"`
	CapableComponents   int32 `protobuf:"varint,5,opt,name=capableComponents,proto3" json:"capableComponents,omitempty"`
	TrackableComponents int32 `protobuf:"varint,6,opt,name=trackableComponents,proto3" json:"trackableComponents,omitempty"`
}

func (x *DeviceCapabilities) Reset() {
	*x = DeviceCapabilities{}
	mi := &file_deviceupdate_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCapabilities) ProtoMessage() {}

func (x *DeviceCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCapabilities.ProtoReflect.Descriptor instead.
func (*DeviceCapabilities) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceCapabilities) GetIsAdvertising() bool {
	if x != nil {
		return x.IsAdvertising
	}
	return false
}

func (x *DeviceCapabilities) GetCapableComponents() int32 {
	if x != nil {
		return x.CapableComponents
	}
	return 0
}

func (x *DeviceCapabilities) GetTrackableComponents() int32 {
	if x != nil {
		return x.TrackableComponents
	}
	return 0
}

type DeviceDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDefinedName             string                        `protobuf:"bytes,1,opt,name=userDefinedName,proto3" json:"userDefinedName,omitempty"`
	DeviceType                  SpotDeviceType                `protobuf:"varint,2,opt,name=deviceType,proto3,enum=SpotDeviceType" json:"deviceType,omitempty"`
	DeviceComponentsInformation []*DeviceComponentInformation `protobuf:"bytes,9,rep,name=deviceComponentsInformation,proto3" json:"deviceComponentsInformation,omitempty"`
}

func (x *DeviceDescription) Reset() {
	*x = DeviceDescription{}
	mi := &file_deviceupdate_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDescription) ProtoMessage() {}

func (x *DeviceDescription) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDescription.ProtoReflect.Descriptor instead.
func (*DeviceDescription) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{38}
}

func (x *DeviceDescription) GetUserDefinedName() string {
	if x != nil {
		return x.UserDefinedName
	}
	return ""
}

func (x *DeviceDescription) GetDeviceType() SpotDeviceType {
	if x != nil {
		return x.DeviceType
	}
	return SpotDeviceType_DEVICE_TYPE_UNKNOWN
}

func (x *DeviceDescription) GetDeviceComponentsInformation() []*DeviceComponentInformation {
	if x != nil {
		return x.DeviceComponentsInformation
	}
	return nil
}

type DeviceComponentInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl string `protobuf:"bytes,1,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
}

func (x *DeviceComponentInformation) Reset() {
	*x = DeviceComponentInformation{}
	mi := &file_deviceupdate_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceComponentInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceComponentInformation) ProtoMessage() {}

func (x *DeviceComponentInformation) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceComponentInformation.ProtoReflect.Descriptor instead.
func (*DeviceComponentInformation) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{39}
}

func (x *DeviceComponentInformation) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type PublicKeyIdList_PublicKeyIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp          *Time         `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PublicKeyId        *TruncatedEID `protobuf:"bytes,2,opt,name=publicKeyId,proto3" json:"publicKeyId,omitempty"`
	TrackableComponent int32         `protobuf:"varint,3,opt,name=trackableComponent,proto3" json:"trackableComponent,omitempty"`
}

func (x *PublicKeyIdList_PublicKeyIdInfo) Reset() {
	*x = PublicKeyIdList_PublicKeyIdInfo{}
	mi := &file_deviceupdate_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKeyIdList_PublicKeyIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyIdList_PublicKeyIdInfo) ProtoMessage() {}

func (x *PublicKeyIdList_PublicKeyIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyIdList_PublicKeyIdInfo.ProtoReflect.Descriptor instead.
func (*PublicKeyIdList_PublicKeyIdInfo) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{34, 0}
}

func (x *PublicKeyIdList_PublicKeyIdInfo) GetTimestamp() *Time {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PublicKeyIdList_PublicKeyIdInfo) GetPublicKeyId() *TruncatedEID {
	if x != nil {
		return x.PublicKeyId
	}
	return nil
}

func (x *PublicKeyIdList_PublicKeyIdInfo) GetTrackableComponent() int32 {
	if x != nil {
		return x.TrackableComponent
	}
	return 0
}

type UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanonicId  *CanonicId       `protobuf:"bytes,1,opt,name=canonicId,proto3" json:"canonicId,omitempty"`
	ClientList *PublicKeyIdList `protobuf:"bytes,2,opt,name=clientList,proto3" json:"clientList,omitempty"`
	PairDate   int32            `protobuf:"varint,3,opt,name=pairDate,proto3" json:"pairDate,omitempty"`
}

func (x *UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) Reset() {
	*x = UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds{}
	mi := &file_deviceupdate_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) ProtoMessage() {}

func (x *UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) ProtoReflect() protoreflect.Message {
	mi := &file_deviceupdate_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds.ProtoReflect.Descriptor instead.
func (*UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) Descriptor() ([]byte, []int) {
	return file_deviceupdate_proto_rawDescGZIP(), []int{36, 0}
}

func (x *UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) GetCanonicId() *CanonicId {
	if x != nil {
		return x.CanonicId
	}
	return nil
}

func (x *UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) GetClientList() *PublicKeyIdList {
	if x != nil {
		return x.ClientList
	}
	return nil
}

func (x *UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds) GetPairDate() int32 {
	if x != nil {
		return x.PairDate
	}
	return 0
}

var File_deviceupdate_proto protoreflect.FileDescriptor

var file_deviceupdate_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x69, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x45, 0x32, 0x65, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x1c, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1c, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x41,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x1c, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x41,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x46, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x18, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4c, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xed, 0x01,
	0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6d, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6d, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x67, 0x63, 0x6d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x63, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x52, 0x11, 0x67, 0x63, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x2d, 0x0a,
	0x1b, 0x47, 0x63, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xca, 0x01, 0x0a,
	0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x1e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x1b,
	0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22,
	0x6d, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x49,
	0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x52, 0x09,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x63,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x66, 0x63, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8a, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x66, 0x69, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a,
	0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xb4, 0x01,
	0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x49, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x10, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x49, 0x64, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x22, 0x1b, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x48, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53,
	0x70, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x61, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xa9, 0x02, 0x0a, 0x14, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a,
	0x26, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x26, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x21, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x21, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x21, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x17, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x20,
	0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x68, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c,
	0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a,
	0x1d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x22, 0x60, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x73, 0x74, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x65,
	0x32, 0x65, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x45, 0x32, 0x45, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x65, 0x32, 0x65, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x13, 0x75, 0x6e, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x75, 0x6e, 0x77, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x01,
	0x0a, 0x19, 0x45, 0x32, 0x45, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x14, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x97, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x49, 0x44, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x0c, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x69, 0x64, 0x22, 0x8f,
	0x02, 0x0a, 0x24, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x69, 0x64,
	0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x49, 0x64, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x9a, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcd, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d,
	0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a,
	0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x2a, 0xa5, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x41, 0x53, 0x54, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x2a,
	0xa6, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4d, 0x44, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4d, 0x44, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x46,
	0x46, 0x49, 0x43, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4d, 0x44, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4d, 0x44,
	0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x4d, 0x44, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x03,
	0x2a, 0x60, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x4f, 0x54,
	0x10, 0x02, 0x2a, 0x82, 0x05, 0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45,
	0x41, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x50, 0x54,
	0x4f, 0x50, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x47, 0x45, 0x10, 0x0b,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x4b, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x0d, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x54,
	0x48, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x47, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x42,
	0x4f, 0x4f, 0x4b, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x13, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x15, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x59, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4d, 0x42, 0x52,
	0x45, 0x4c, 0x4c, 0x41, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x55, 0x53, 0x10, 0x19, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x41,
	0x52, 0x42, 0x55, 0x44, 0x53, 0x10, 0x1a, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x79, 0x6c, 0x61, 0x6e, 0x6d, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x6b, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2d, 0x66, 0x69, 0x6e, 0x64, 0x6d, 0x79,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6e, 0x6f, 0x76, 0x61, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deviceupdate_proto_rawDescOnce sync.Once
	file_deviceupdate_proto_rawDescData = file_deviceupdate_proto_rawDesc
)

func file_deviceupdate_proto_rawDescGZIP() []byte {
	file_deviceupdate_proto_rawDescOnce.Do(func() {
		file_deviceupdate_proto_rawDescData = protoimpl.X.CompressGZIP(file_deviceupdate_proto_rawDescData)
	})
	return file_deviceupdate_proto_rawDescData
}

var file_deviceupdate_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_deviceupdate_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_deviceupdate_proto_goTypes = []any{
	(DeviceType)(0),                                                 // 0: DeviceType
	(SpotContributorType)(0),                                        // 1: SpotContributorType
	(DeviceComponent)(0),                                            // 2: DeviceComponent
	(IdentifierInformationType)(0),                                  // 3: IdentifierInformationType
	(SpotDeviceType)(0),                                             // 4: SpotDeviceType
	(*GetEidInfoForE2EeDevicesResponse)(nil),                        // 5: GetEidInfoForE2eeDevicesResponse
	(*EncryptedOwnerKeyAndMetadata)(nil),                            // 6: EncryptedOwnerKeyAndMetadata
	(*DevicesList)(nil),                                             // 7: DevicesList
	(*DevicesListRequest)(nil),                                      // 8: DevicesListRequest
	(*DevicesListRequestPayload)(nil),                               // 9: DevicesListRequestPayload
	(*ExecuteActionRequest)(nil),                                    // 10: ExecuteActionRequest
	(*ExecuteActionRequestMetadata)(nil),                            // 11: ExecuteActionRequestMetadata
	(*GcmCloudMessagingIdProtobuf)(nil),                             // 12: GcmCloudMessagingIdProtobuf
	(*ExecuteActionType)(nil),                                       // 13: ExecuteActionType
	(*ExecuteActionLocateTrackerType)(nil),                          // 14: ExecuteActionLocateTrackerType
	(*ExecuteActionSoundType)(nil),                                  // 15: ExecuteActionSoundType
	(*ExecuteActionScope)(nil),                                      // 16: ExecuteActionScope
	(*ExecuteActionDeviceIdentifier)(nil),                           // 17: ExecuteActionDeviceIdentifier
	(*DeviceUpdate)(nil),                                            // 18: DeviceUpdate
	(*DeviceMetadata)(nil),                                          // 19: DeviceMetadata
	(*ImageInformation)(nil),                                        // 20: ImageInformation
	(*IdentitfierInformation)(nil),                                  // 21: IdentitfierInformation
	(*PhoneInformation)(nil),                                        // 22: PhoneInformation
	(*CanonicIds)(nil),                                              // 23: CanonicIds
	(*CanonicId)(nil),                                               // 24: CanonicId
	(*DeviceInformation)(nil),                                       // 25: DeviceInformation
	(*DeviceTypeInformation)(nil),                                   // 26: DeviceTypeInformation
	(*DeviceRegistration)(nil),                                      // 27: DeviceRegistration
	(*EncryptedUserSecrets)(nil),                                    // 28: EncryptedUserSecrets
	(*LocationInformation)(nil),                                     // 29: LocationInformation
	(*LocationsAndTimestampsWrapper)(nil),                           // 30: LocationsAndTimestampsWrapper
	(*RecentLocationAndNetworkLocations)(nil),                       // 31: RecentLocationAndNetworkLocations
	(*AccessInformation)(nil),                                       // 32: AccessInformation
	(*RequestMetadata)(nil),                                         // 33: RequestMetadata
	(*EncryptionUnlockRequestExtras)(nil),                           // 34: EncryptionUnlockRequestExtras
	(*SecurityDomain)(nil),                                          // 35: SecurityDomain
	(*Location)(nil),                                                // 36: Location
	(*RegisterBleDeviceRequest)(nil),                                // 37: RegisterBleDeviceRequest
	(*E2EEPublicKeyRegistration)(nil),                               // 38: E2EEPublicKeyRegistration
	(*PublicKeyIdList)(nil),                                         // 39: PublicKeyIdList
	(*TruncatedEID)(nil),                                            // 40: TruncatedEID
	(*UploadPrecomputedPublicKeyIdsRequest)(nil),                    // 41: UploadPrecomputedPublicKeyIdsRequest
	(*DeviceCapabilities)(nil),                                      // 42: DeviceCapabilities
	(*DeviceDescription)(nil),                                       // 43: DeviceDescription
	(*DeviceComponentInformation)(nil),                              // 44: DeviceComponentInformation
	(*PublicKeyIdList_PublicKeyIdInfo)(nil),                         // 45: PublicKeyIdList.PublicKeyIdInfo
	(*UploadPrecomputedPublicKeyIdsRequest_DevicePublicKeyIds)(nil), // 46: UploadPrecomputedPublicKeyIdsRequest.DevicePublicKeyIds
	(*Time)(nil),                                                    // 47: Time
	(*LocationReport)(nil),                                          // 48: LocationReport
}
var file_deviceupdate_proto_depIdxs = []int32{
	6,  // 0: GetEidInfoForE2eeDevicesResponse.encryptedOwnerKeyAndMetadata:type_name -> EncryptedOwnerKeyAndMetadata
	19, // 1: DevicesList.deviceMetadata:type_name -> DeviceMetadata
	9,  // 2: DevicesListRequest.deviceListRequestPayload:type_name -> DevicesListRequestPayload
	0,  // 3: DevicesListRequestPayload.type:type_name -> DeviceType
	16, // 4: ExecuteActionRequest.scope:type_name -> ExecuteActionScope
	13, // 5: ExecuteActionRequest.action:type_name -> ExecuteActionType
	11, // 6: ExecuteActionRequest.requestMetadata:type_name -> ExecuteActionRequestMetadata
	0,  // 7: ExecuteActionRequestMetadata.type:type_name -> DeviceType
	12, // 8: ExecuteActionRequestMetadata.gcmRegistrationId:type_name -> GcmCloudMessagingIdProtobuf
	14, // 9: ExecuteActionType.locateTracker:type_name -> ExecuteActionLocateTrackerType
	15, // 10: ExecuteActionType.startSound:type_name -> ExecuteActionSoundType
	15, // 11: ExecuteActionType.stopSound:type_name -> ExecuteActionSoundType
	47, // 12: ExecuteActionLocateTrackerType.lastHighTrafficEnablingTime:type_name -> Time
	1,  // 13: ExecuteActionLocateTrackerType.contributorType:type_name -> SpotContributorType
	2,  // 14: ExecuteActionSoundType.component:type_name -> DeviceComponent
	0,  // 15: ExecuteActionScope.type:type_name -> DeviceType
	17, // 16: ExecuteActionScope.device:type_name -> ExecuteActionDeviceIdentifier
	24, // 17: ExecuteActionDeviceIdentifier.canonicId:type_name -> CanonicId
	11, // 18: DeviceUpdate.fcmMetadata:type_name -> ExecuteActionRequestMetadata
	19, // 19: DeviceUpdate.deviceMetadata:type_name -> DeviceMetadata
	33, // 20: DeviceUpdate.requestMetadata:type_name -> RequestMetadata
	21, // 21: DeviceMetadata.identifierInformation:type_name -> IdentitfierInformation
	25, // 22: DeviceMetadata.information:type_name -> DeviceInformation
	20, // 23: DeviceMetadata.imageInformation:type_name -> ImageInformation
	22, // 24: IdentitfierInformation.phoneInformation:type_name -> PhoneInformation
	3,  // 25: IdentitfierInformation.type:type_name -> IdentifierInformationType
	23, // 26: IdentitfierInformation.canonicIds:type_name -> CanonicIds
	23, // 27: PhoneInformation.canonicIds:type_name -> CanonicIds
	24, // 28: CanonicIds.canonicId:type_name -> CanonicId
	27, // 29: DeviceInformation.deviceRegistration:type_name -> DeviceRegistration
	29, // 30: DeviceInformation.locationInformation:type_name -> LocationInformation
	32, // 31: DeviceInformation.accessInformation:type_name -> AccessInformation
	4,  // 32: DeviceTypeInformation.deviceType:type_name -> SpotDeviceType
	26, // 33: DeviceRegistration.deviceTypeInformation:type_name -> DeviceTypeInformation
	28, // 34: DeviceRegistration.encryptedUserSecrets:type_name -> EncryptedUserSecrets
	47, // 35: EncryptedUserSecrets.creationDate:type_name -> Time
	30, // 36: LocationInformation.reports:type_name -> LocationsAndTimestampsWrapper
	31, // 37: LocationsAndTimestampsWrapper.recentLocationAndNetworkLocations:type_name -> RecentLocationAndNetworkLocations
	48, // 38: RecentLocationAndNetworkLocations.recentLocation:type_name -> LocationReport
	47, // 39: RecentLocationAndNetworkLocations.recentLocationTimestamp:type_name -> Time
	48, // 40: RecentLocationAndNetworkLocations.networkLocations:type_name -> LocationReport
	47, // 41: RecentLocationAndNetworkLocations.networkLocationTimestamps:type_name -> Time
	47, // 42: RequestMetadata.responseTime:type_name -> Time
	35, // 43: EncryptionUnlockRequestExtras.securityDomain:type_name -> SecurityDomain
	43, // 44: RegisterBleDeviceRequest.description:type_name -> DeviceDescription
	42, // 45: RegisterBleDeviceRequest.capabilities:type_name -> DeviceCapabilities
	38, // 46: RegisterBleDeviceRequest.e2eePublicKeyRegistration:type_name -> E2EEPublicKeyRegistration
	28, // 47: E2EEPublicKeyRegistration.encryptedUserSecrets:type_name -> EncryptedUserSecrets
	39, // 48: E2EEPublicKeyRegistration.publicKeyIdList:type_name -> PublicKeyIdList
	45, // 49: PublicKeyIdList.publicKeyIdInfo:type_name -> PublicKeyIdList.PublicKeyIdInfo
	46, // 50: UploadPrecomputedPublicKeyIdsRequest.deviceEids:type_name -> UploadPrecomputedPublicKeyIdsRequest.DevicePublicKeyIds
	4,  // 51: DeviceDescription.deviceType:type_name -> SpotDeviceType
	44, // 52: DeviceDescription.deviceComponentsInformation:type_name -> DeviceComponentInformation
	47, // 53: PublicKeyIdList.PublicKeyIdInfo.timestamp:type_name -> Time
	40, // 54: PublicKeyIdList.PublicKeyIdInfo.publicKeyId:type_name -> TruncatedEID
	24, // 55: UploadPrecomputedPublicKeyIdsRequest.DevicePublicKeyIds.canonicId:type_name -> CanonicId
	39, // 56: UploadPrecomputedPublicKeyIdsRequest.DevicePublicKeyIds.clientList:type_name -> PublicKeyIdList
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_deviceupdate_proto_init() }
func file_deviceupdate_proto_init() {
	if File_deviceupdate_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deviceupdate_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_deviceupdate_proto_goTypes,
		DependencyIndexes: file_deviceupdate_proto_depIdxs,
		EnumInfos:         file_deviceupdate_proto_enumTypes,
		MessageInfos:      file_deviceupdate_proto_msgTypes,
	}.Build()
	File_deviceupdate_proto = out.File
	file_deviceupdate_proto_rawDesc = nil
	file_deviceupdate_proto_goTypes = nil
	file_deviceupdate_proto_depIdxs = nil
}
